//加载模型到数组
int DIYmodel::load_model(vector<float>* pvalues,vector<float>* tvalues,vector<float>* nvalues){
    int index=0;
    pvalues->clear();
    tvalues->clear();
    nvalues->clear();
    for(auto myBezier: faces){
        vector<int> ind = myBezier.getIndices();
	    vector<glm::vec3> verts = myBezier.getVertices();
	    vector<glm::vec2> tex = myBezier.getTexCoords();
	    vector<glm::vec3> norm = myBezier.getNormals();
        for (int i = 0; i < myBezier.getNumIndices(); i++)
            {
                pvalues->push_back(verts[ind[i]].x);
                pvalues->push_back(verts[ind[i]].y);
                pvalues->push_back(verts[ind[i]].z);
                tvalues->push_back(tex[ind[i]].s);
                tvalues->push_back(tex[ind[i]].t);
                nvalues->push_back(norm[ind[i]].x);
                nvalues->push_back(norm[ind[i]].y);
                nvalues->push_back(norm[ind[i]].z);
                
            }
        index+=myBezier.getNumIndices();
    }
    return index;
}

//刷新
void DIYmodel::remake(){
    

    load_texture(basic_texs[material_idx],material);
    faces.clear();
    float totl=0;
    vector<float> lengths;
    for(int i=0;i+3<vertices.size() ;i+=3){
        for(int j=0;j<3;j++){           
            float t=(vertices[i+j+1].x-vertices[i+j].x)
            *(vertices[i+j+1].x-vertices[i+j].x)+
            (vertices[i+j+1].y-vertices[i+j].y)
            *(vertices[i+j+1].y-vertices[i+j].y);
		    totl+=sqrt(t);	
            lengths.push_back(sqrt(t));
        }
    }

    float offset=0;

    for(int i=0;i+3<vertices.size() ;i+=3){
        vector<glm::vec2> vec;
        
        for(int j=0;j<4;j++)
            vec.push_back(glm::vec2(vertices[i+j].x,vertices[i+j].y));
        
        float l=offset;
        float r=l+(lengths[i]+lengths[i+1]+lengths[i+2])/totl;
        BezierFace bf=BezierFace(vec,l,r);
        offset=r;
        
        faces.push_back(bf);
    }

        totalindex=load_model(&pvalues,&tvalues,&nvalues);

        glGenVertexArrays(1, &VAO);
	    glGenBuffers(3, VBO);
	    glBindVertexArray(VAO);
	    glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	    glBufferData(GL_ARRAY_BUFFER, pvalues.size()*4, &pvalues[0], GL_STREAM_DRAW);
        glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	    glBufferData(GL_ARRAY_BUFFER, tvalues.size()*4, &tvalues[0], GL_STREAM_DRAW);
	    glBindBuffer(GL_ARRAY_BUFFER, VBO[2]);
	    glBufferData(GL_ARRAY_BUFFER, nvalues.size()*4, &nvalues[0], GL_STREAM_DRAW);


}


void DIYmodel::Draw(Camera camera,Shader ourShader,glm::vec3 lightPos){
    

        ourShader.use();
        glm::mat4 projection = glm::perspective(glm::radians(camera.Zoom), SCR_WIDTH / SCR_HEIGHT, 0.1f, 100.0f);
        glm::mat4 view = camera.GetViewMatrix(); 
        glm::mat4 model;   

        ourShader.setMat4("projection", projection);
        ourShader.setMat4("view", view);
        ourShader.setMat4("model", model);
         ourShader.setInt("shadowdisplay",1);
            
        ourShader.setVec3("viewPos",camera.Position);
        ourShader.setVec3("light.position", lightPos);

    
        glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, (void*)0);
        glEnableVertexAttribArray(0);

        glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 0, (void*)0);
        glEnableVertexAttribArray(1);

        glBindBuffer(GL_ARRAY_BUFFER, VBO[2]);
        glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 0, (void*)0);
        glEnableVertexAttribArray(2);

        glActiveTexture(GL_TEXTURE15);
        glBindTexture(GL_TEXTURE_2D, material.map);
        ourShader.setInt("s",15);

        int texnum=textures.size();
        for(int i=0;i<texnum;i++){
            glActiveTexture(GL_TEXTURE1+i);
            glBindTexture(GL_TEXTURE_2D, textures[i].map);
        }

        ourShader.setInt("texnum",texnum);
        for(int i=0;i<texnum;i++){
            ourShader.setFloat("trange_l["+to_string(i)+"]",textures[i].l);
            ourShader.setFloat("trange_r["+to_string(i)+"]",textures[i].r);
            ourShader.setInt("texs["+to_string(i)+"]",i+1);
            ourShader.setInt("repeat["+to_string(i)+"]",textures[i].repeat);
            ourShader.setInt("type["+to_string(i)+"]",textures[i].type);
        }
        

        //glEnable(GL_CULL_FACE);
        //glFrontFace(GL_CCW);


        //glPolygonMode(GL_FRONT_AND_BACK ,GL_LINE);
        glDrawArrays(GL_TRIANGLES, 0, totalindex);
        ourShader.setInt("texnum",0);


}